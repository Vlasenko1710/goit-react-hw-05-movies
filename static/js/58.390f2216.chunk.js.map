{"version":3,"file":"static/js/58.390f2216.chunk.js","mappings":"qQAEe,SAASA,EAAT,GAA+B,IAAVC,EAAS,EAATA,MAC1BC,EACND,EADMC,YAAaC,EACnBF,EADmBE,MAAOC,EAC1BH,EAD0BG,aAAcC,EACxCJ,EADwCI,aAAcC,EACtDL,EADsDK,SAAUC,EAChEN,EADgEM,OAG5DC,EAAc,IAAIC,KAAKL,GACvBM,EAAcC,MAAMH,GACtB,UACAA,EAAYI,cACVC,EAAYX,EAAW,0CACUA,GACnC,oEACEY,EAAYT,EAAY,WACP,GAAfA,GAAmBU,QAAQ,GADL,KAE1B,YAEJ,OAAKZ,GAKH,4BACE,0BACE,gBACEa,IAAKH,EACLI,IAAKd,EACLe,MAAM,MACNC,OAAO,MACPC,QAAQ,YAGZ,4BACE,iCACGjB,QADH,IACGA,EAAAA,EAAS,OADZ,KACsBO,EADtB,QAGA,wCAAgBI,MAChB,sCACA,uBAAIR,IACHC,GAAUA,EAAOc,OAAS,IACzB,yBACG,KACD,mCACCd,EAAOe,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,eAzBvC,SA+BV,C,aCvCc,SAASC,IAAgB,IAAD,YAC3BC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACjB,GAA0CC,EAAAA,EAAAA,UAAS,CAAC,GAApD,eAAOC,EAAP,KAAsBC,EAAtB,KAaC,OAXDC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAK,mCAAG,WAAMR,GAAN,gGAESS,EAAAA,GAAkBT,GAF3B,OAEHU,EAFG,OAGTJ,EAAiBI,GAHR,gDAKdC,QAAQC,IAAR,MALc,yDAAH,sDAQhBJ,EAAMR,EACJ,GAAE,CAACA,KAEA,2BACI,4BACI,SAAC,KAAD,CAAMa,GAAE,iBAAEX,QAAF,IAAEA,GAAF,UAAEA,EAAUY,aAAZ,aAAE,EAAiBC,YAAnB,QAA0B,IAAlC,UACI,gDAGI,SAAC1C,EAAD,CAAWC,MAAO+B,KAClB,mBACA,4BACI,SAAC,KAAD,CAAMQ,GAAG,OAAOC,MAAO,CAAEC,KAAI,iBAACb,QAAD,IAACA,GAAD,UAACA,EAAUY,aAAX,aAAC,EAAiBC,YAAlB,QAAyB,KAAtD,mBAGA,SAAC,KAAD,CAAMF,GAAG,UAAUC,MAAO,CAAEC,KAAI,iBAAEb,QAAF,IAAEA,GAAF,UAAEA,EAAUY,aAAZ,aAAE,EAAiBC,YAAnB,QAA0B,KAA1D,yBAIJ,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACI,SAAC,KAAD,UA0D1B,C,+LCnGIC,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAHiB,+BAKV,IAAMC,EAAc,mCAAG,oGACVD,EAAAA,EAAAA,IAAA,qCAAwCD,IAD9B,cACtBT,EADsB,yBAErBA,EAAIY,MAFiB,2CAAH,qDAKdC,EAAa,mCAAG,WAAMC,GAAN,uFACTJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,oBAAkCL,IADzB,cACrBT,EADqB,yBAEpBA,EAAIY,MAFgB,2CAAH,sDAKbG,EAAgB,mCAAG,WAAMjD,GAAN,uFACZ4C,EAAAA,EAAAA,IAAA,gCACSD,EADT,kBAC0B3C,IAFd,cACxBkC,EADwB,yBAIvBA,EAAIY,MAJmB,2CAAH,sDAOhBI,EAAS,mCAAG,WAAMF,GAAN,uFACLJ,EAAAA,EAAAA,IAAA,iBACNI,EADM,4BACgBL,EADhB,oBADK,cACjBT,EADiB,yBAIhBA,EAAIY,MAJY,2CAAH,sDAOTK,EAAY,mCAAG,WAAMH,GAAN,uFACRJ,EAAAA,EAAAA,IAAA,iBACNI,EADM,4BACgBL,EADhB,2BADQ,cACpBT,EADoB,yBAInBA,EAAIY,MAJe,2CAAH,qD","sources":["components/MovieCard/MovieCard.js","pages/MovieDetails/MovieDetails.js","search/SearchApi.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport default function MovieCard({ movie }) {\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movie;\n\n  const releaseDate = new Date(release_date);\n  const releaseYear = isNaN(releaseDate)\n    ? 'Unknown'\n    : releaseDate.getFullYear();\n  const posterUrl = poster_path\n    ? `https://image.tmdb.org/t/p/w400/${poster_path}`\n    : 'https://via.placeholder.com/400x600.png?text=Poster+Not+Available';\n  const userScore = vote_average\n    ? `${(vote_average * 10).toFixed(0)}%`\n    : 'Not rated';\n\n  if (!title) {\n    return 'Unknown';\n  }\n\n  return (\n    <div>\n      <div>\n        <img\n          src={posterUrl}\n          alt={title}\n          width=\"300\"\n          height=\"450\"\n          loading=\"lazy\"\n        />\n      </div>\n      <div>\n        <h2>\n          {title ?? 'Name'} ({releaseYear})\n        </h2>\n        <p>User Score: {userScore}</p>\n        <h3>Overview</h3>\n        <p>{overview}</p>\n        {genres && genres.length > 0 && (\n          <p>\n            {' '}\n            <h3>Genres</h3>\n            {genres.map(genre => genre.name).join(', ')}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({ name: PropTypes.string.isRequired })\n    ),\n  }).isRequired,\n};\n","import {useState} from 'react';\nimport {Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport Loading from 'components/Loading';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport { Suspense } from 'react';\n\n// import { Link } from 'react-router-dom';\nimport * as API from 'search/SearchApi';\nimport { useEffect } from 'react';\n\nexport default function MovieDetails() {\n    const { movieId } = useParams();\n    const location = useLocation();\n    const [selectedMovie, setSelectedMovie] = useState({});\n\n    useEffect(() => {\n        const fetch = async movieId => {\n         try {\n             const res = await API.searchMovieId(movieId);\n             setSelectedMovie(res);     \n            }catch (error) {\n        console.log(error);\n      }\n    };\n   fetch(movieId);\n    }, [movieId]);\n     return (\n        <main>\n            <div>\n                <Link to={location?.state?.from?? '/'}>\n                    <span>Back to Movies</span>\n                </Link>\n                \n                        <MovieCard movie={selectedMovie} />\n                        <hr />\n                        <div>\n                            <Link to=\"cast\" state={{ from:location?.state?.from?? '/'}}>\n                                Cast\n                            </Link>\n                            <Link to=\"reviews\" state={{ from: location?.state?.from?? '/'}}>\n                                Reviews\n                            </Link>\n                        </div>\n                        <Suspense fallback={<Loading />}>\n                            <Outlet />\n                        </Suspense>\n                    \n            </div>\n        </main>\n    );\n\n//   const [data, setData] = useState(null);\n//   const [status, setStatus] = useState('');\n\n//   const { id } = useParams();\n\n//   const location = useLocation();\n//   const backLink = location?.state?.from ?? '/';\n\n//   useMemo(() => {\n//     const fetch = async () => {\n//       try {\n//         const res = await API.searchMovieId(id);\n//         setData(res);\n//         setStatus(res.status);\n//         return;\n//       } catch (error) {\n//         console.log(error);\n//       }\n//     };\n//     fetch();\n//   }, [id]);\n//     return (\n//         <main>\n//             <div>\n//                 <Link to={backLink}>\n//                     <span>Back to Movies</span>\n//                 </Link>\n//                 {status === 'Released' ? (\n//                     <>\n//                         <MovieCard data={data} />\n//                         <hr />\n//                         <div>\n//                             <Link to=\"cast\" state={{ from: backLink }}>\n//                                 Cast\n//                             </Link>\n//                             <Link to=\"reviews\" state={{ from: backLink }}>\n//                                 Reviews\n//                             </Link>\n//                         </div>\n//                         <Suspense fallback={<Loading />}>\n//                             <Outlet />\n//                         </Suspense>\n//                     </>\n//                 ) : (\n//                     <p>\n//                         Oops, page Not Found :( Please go back and try again later...\n//                     </p>\n//                 )}\n//             </div>\n//         </main>\n//     );\n }","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '09399571fb2c59022a6ba0c47cedc11c';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const searchTrending = async () => {\n  const res = await axios.get(`/trending/all/week?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const searchMovieId = async id => {\n  const res = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const searchMovieTitle = async title => {\n  const res = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${title}`\n  );\n  return res.data;\n};\n\nexport const castMovie = async id => {\n  const res = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return res.data;\n};\n\nexport const reviewsMovie = async id => {\n  const res = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return res.data;\n};\n"],"names":["MovieCard","movie","poster_path","title","release_date","vote_average","overview","genres","releaseDate","Date","releaseYear","isNaN","getFullYear","posterUrl","userScore","toFixed","src","alt","width","height","loading","length","map","genre","name","join","MovieDetails","movieId","useParams","location","useLocation","useState","selectedMovie","setSelectedMovie","useEffect","fetch","API","res","console","log","to","state","from","Suspense","fallback","Loading","API_KEY","axios","searchTrending","data","searchMovieId","id","searchMovieTitle","castMovie","reviewsMovie"],"sourceRoot":""}